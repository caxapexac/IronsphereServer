#ifndef LOGIC_TESTS_HPP
#define LOGIC_TESTS_HPP

// L1

class tester {
private:
    tester() = default;

public:
    static int test_all();
    static int test_structs();
    static int test_tilemap();
    static int test_unit();
};

// L1
// Разработать и реализовать набор классов:
// - Класс игрового поля
// - Набор классов юнитов
// Игровое поле является контейнером для объектов представляющим прямоугольную сетку. Основные требования к классу игрового поля:
// - Создание поля произвольного размера
// - Контроль максимального количества объектов на поле
// - Возможность добавления и удаления объектов на поле
// - Возможность копирования поля (включая объекты на нем)
// - Для хранения запрещается использовать контейнеры из stl
// Юнит является объектов, размещаемым на поля боя. Один юнит представляет собой отряд.
// Основные требования к классам юнитов:
// - Все юниты должны иметь как минимум один общий интерфейс
// - Реализованы 3 типа юнитов (например, пехота, лучники, конница)
// - Реализованы 2 вида юнитов для каждого типа(например, для пехоты могут быть созданы мечники и копейщики)
// - Юниты имеют характеристики, отражающие их основные атрибуты, такие как здоровье, броня, атака.
// - Юнит имеет возможность перемещаться по карте
// Баллы
// ~ Выполнены основные требования класса поле 3 балла
// ~ Выполнены основные требования классов юнитов 4 балла
// ~ Имеется 3+ демонстрационных примера 1 балл
// ~ Все методы класса сохраняют инвариант этого класса 2 балл
// ~ *Созданы конструкторы копирования и перемещения 2 балла
// ~ *Все методы принимают параметры оптимальным образом (то есть, отсутствует лишнее копирование объектов) 1 балл
// ~ *Для атрибутов юнитов созданы свои классы. Создавать их требуется, если это не противоречит логике. 2 балла
// ~ *Для создания юнитов используются паттерны “Абстрактный метод” / “Абстрактная фабрика” 3 баллов
// ~ *Создан итератор для поля 2 балла

// L2
// Разработать и реализовать набор классов:
// - Класс базы
// - Набор классов ландшафта карты
// - Набор классов нейтральных объектов поля
// Класс базы должен отвечать за создание юнитов, а также учитывать юнитов, относящихся к текущей базе.
// - Основные требования к классу база:
// - База должна размещаться на поле
// - Методы для создания юнитов
// - Учет юнитов, и реакция на их уничтожение и создание
// - База должна обладать характеристиками такими, как здоровье, максимальное количество юнитов,
//   которые могут быть одновременно созданы на базе, и.т.д.
// Набор классов ландшафта определяют вид поля. Основные требования к классам ландшафта:
// - Должно быть создано минимум 3 типа ландшафта
// - Все классы ландшафта должны иметь как минимум один интерфейс
// - Ландшафт должен влиять на юнитов (например, возможно пройти по клетке с определенным ландшафтом
//   или запрет для атаки определенного типа юнитов)
// - На каждой клетке поля должен быть определенный тип ландшафта
// Набор классов нейтральных объектов представляют объекты, располагаемые на поле и с которыми могут взаимодействие юнитов. Основные требования к классам нейтральных объектов поля:
// - Создано не менее 4 типов нейтральных объектов
// - Взаимодействие юнитов с нейтральными объектами, должно быть реализовано в виде перегрузки операций
// - Классы нейтральных объектов должны иметь как минимум один общий интерфейс
// Баллы
// ~ Выполнены основные требования к классу база 2 балла
// ~ Выполнены основные требования к набору классов ландшафта 2 балла
// ~ Выполнены основные требования к набору классов нейтр. объектов 2 балла
// ~ Добавлено взаимодействие юнитов 1 балла
// ~ Имеется 3+ демонстрационных примера 1 балл
// ~ Взаимодействие через перегрузку операторов 2 балла
// ~ *Для хранения информации о юнитах в классе базы используется паттерн “Компоновщик” 2 балла
// ~ *Для наблюдения над юнитами в классе база используется паттерн “Наблюдатель” 2 балла
// ~ *Для взаимодействия ландшафта с юнитам используется паттерн “Прокси” 3 балла
// ~ *Для взаимодействия одного типа нейтрального объекта с разными типами юнитов используется паттерн “Стратегия” 3 балла

// L3
// Разработать и реализовать набора классов для взаимодействия пользователя с юнитами и базой. Основные требования:
// - Должен быть реализован функционал управления юнитами
// - Должен быть реализован функционал управления базой
// Баллы
// ~ Выполнены все основные требования к взаимодействию 6 баллов
// ~ Добавлен функционал просмотра состояния базы 3 балла
// ~ Имеется 3+ демонстрационных примера 1 балл
// ~ *Реализован паттерн “Фасад” через который пользователь управляет программой 1 балл
// ~ *Объекты между собой взаимодействуют через паттерн “Посредника” 3 балла
// ~ *Для передачи команд используется паттерн “Команда” 3 балла
// ~ *Для приема команд от пользователя используется паттерн “Цепочка обязанностей” 3 балла

//TODO output string/count passed/exception with a problem
int tester::test_all () {
    int problems = 0;

    return problems;
}
int tester::test_structs () {
    int problems = 0;

    return problems;
}
int tester::test_tilemap () {
    int problems = 0;

    return problems;
}
int tester::test_unit () {
    int problems = 0;

    return problems;
}

#endif //LOGIC_TESTS_HPP
