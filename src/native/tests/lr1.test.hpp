#ifndef LOGIC_LR1_TEST_HPP
#define LOGIC_LR1_TEST_HPP

#include "../base/includes.hpp"
#include "../tilemap/abstract_tilemap.hpp"
#include "../tilemap/square.hpp"
#include "../tilemap/hexagonal.hpp"
#include "tilemap/tilemap_square.test.hpp"
#include "entities/unit_prototype.test.hpp"
#include "entities/unit.test.hpp"

namespace unit_testing {
    void test_lr1() {
        std::cout << "* test_lr1 [started]" << std::endl; //TODO logger
        /// Init:
        srand(time(nullptr));
        json j;
        /// Test:
        /// Разработать и реализовать набор классов:
        /// - Класс игрового поля
        tilemap::square ts = tilemap::square(stts::vector2<int>(10, 20));

        //test_tilemap_square();
        // test_tilemap_hexagonal();
        /// - Набор классов юнитов
        //test_unit_prototype();
        //test_unit();
        /// Игровое поле является контейнером для объектов представляющим прямоугольную сетку. Основные требования к классу игрового поля:
        /// - Создание поля произвольного размера

        /// - Контроль максимального количества объектов на поле
        // abstract_strategy::max_unit_count //TODO
        /// - Возможность добавления и удаления объектов на поле
        //player p = player(); //TODO no storage
        //player.add_unit(new unit); //TODO
        /// - Возможность копирования поля (включая объекты на нем)

        /// - Для хранения запрещается использовать контейнеры из stl

        /// Юнит является объектов, размещаемым на поля боя. Один юнит представляет собой отряд.
        /// Основные требования к классам юнитов:
        /// - Все юниты должны иметь как минимум один общий интерфейс
        /// - Реализованы 3 типа юнитов (например, пехота, лучники, конница)
        /// - Реализованы 2 вида юнитов для каждого типа(например, для пехоты могут быть созданы мечники и копейщики)
        /// - Юниты имеют характеристики, отражающие их основные атрибуты, такие как здоровье, броня, атака.
        /// - Юнит имеет возможность перемещаться по карте
        /// Баллы
        /// ~ Выполнены основные требования класса поле 3 балла
        /// ~ Выполнены основные требования классов юнитов 4 балла
        /// ~ Имеется 3+ демонстрационных примера 1 балл
        /// ~ Все методы класса сохраняют инвариант этого класса 2 балл
        /// ~ *Созданы конструкторы копирования и перемещения 2 балла
        /// ~ *Все методы принимают параметры оптимальным образом (то есть, отсутствует лишнее копирование объектов) 1 балл
        /// ~ *Для атрибутов юнитов созданы свои классы. Создавать их требуется, если это не противоречит логике. 2 балла
        /// ~ *Для создания юнитов используются паттерны “Абстрактный метод” / “Абстрактная фабрика” 3 баллов
        /// ~ *Создан итератор для поля 2 балла
        std::cout << "* test_lr1 [success]" << std::endl;
    }
}

#endif //LOGIC_LR1_TEST_HPP
